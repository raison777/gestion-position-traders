### Mes impressions

# Les classes modèles
Rails propose une génération automatiques de modèles performantes. Les classes créees héritent de ActiveRecords, cet héritage permet d'embarquer des méthodes CRUD.

Ce qui est plus ambigüe, c'est l'appellation models. A mon sens, ces classes ne sont pas des composants métiers tels qu'on pourrait le croire avec l'appellation "models" mais plutôt des DAO.

L'idéal pour bien respecter la séparation triple couche du MVC serait donc de séparer les composants métiers des DAO (ici les classes models). Je vais d'abord m'axer sur le fonctionnel mais j'y reviendrais en premier lieu.



# Le faible typage
Malheuresement, Ruby n'est pas fortement typé. J'apprécie le fort typage pour sa rigueur, aussi je suis un peu perdu quand le type d'un objet n'est pas clairement déterminé. Par exemple, j'aimerais faire un service CRUD générique(bien qu'il est peu de sens ici) puis en faire hériter différents service. Mais sans typages fort, pas de généricité (ou peut-être trop de généricité?).
Il faudra que je réfléchisse pour voir si ce type de service est envisageable. Creuser pour voir avec un test sur variable de constructeur pour vérifier que mon objet est bien un modèle.
-EDIT1 - PISTE : En utilisant le mot clé 'extend' avec les modules, on fait hériter les méthodes du module en tant que méthodes de classe. (!=Héritage?)


# ISP (Interface Segregation Principle)
Habituellement, j'utilise massivement l'ISP, cependant, aucun mécanisme ruby semble obligée un classe héritant d'une autre (ou incluant un module) à redéfinir les méthodes de la classe parente.
L'ISP semble donc avoir une place plus mince. 

# Le TDD
Pour ce projet j'utilise le TDD, mon développement apparaît vraiment guidé par mes tests, j'ai hâte de voir si à la fin le TDD aura prévenu les écarts et les bugs les plus importants.
-EDIT En définitive, il m'aura bien servi pour toute la partie back-end. Il faut tout de même que je me penche d'avantage dessus afin d'écrire des tests plus fiables et plus précis.

# Les formulaires
A l'instar de ce que propose Spring en Java, j'ai opté pour la mise en place d'objet model Ruby pour contenir l'information d'un formulaire, ce qui me permet d'exercer une validation performante.

# Gestion des erreurs
Il est possible de crée ses propres erreurs pour prévenir de comportement indésirables propres à notre solution.